"""init

Revision ID: 9dbf56d236cb
Revises: 
Create Date: 2021-04-11 12:56:22.677640

"""
from alembic import op
import sqlalchemy as sa
import neuroAPI.database.ext

# revision identifiers, used by Alembic.
revision = '9dbf56d236cb'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('app_users',
                    sa.Column('id', neuroAPI.database.ext.GUID(), nullable=False, comment='User id'),
                    sa.Column('username', sa.String(length=64), nullable=False, comment='User name'),
                    sa.Column('salt', sa.CHAR(length=16), nullable=False, comment='Password salt'),
                    sa.Column('password', sa.CHAR(length=64), nullable=False,
                              comment='sha-256("salt"+":"+"user password")'),
                    sa.Column('user_status', sa.Enum('admin', 'basic', name='userstatus'), nullable=False,
                              comment='Sets privileges'),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('username'),
                    comment="Stores user data. Not named 'users' because of PostgreSQL keyword."
                    )
    op.create_table('content_types',
                    sa.Column('id', neuroAPI.database.ext.GUID(), nullable=False, comment='Content type id'),
                    sa.Column('name', sa.String(length=127), nullable=False, comment='MIME content type'),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('name'),
                    comment='Stores MIME content_types, e.g.:application/vnd.openxmlformats-officedocument'
                            '.spreadsheetml.sheet  //.xlsxapplication/vnd.ms-excel  '
                            '//.xlsapplication/vnd.ms-excel.sheet.binary.macroEnabled.12 //.xlsbtext/csv  //.csv '
                    )
    op.create_table('cross_validations',
                    sa.Column('id', neuroAPI.database.ext.GUID(), nullable=False, comment='Cross-validation id'),
                    sa.Column('name', sa.String(length=64), nullable=False, comment='Cross-validation name'),
                    sa.PrimaryKeyConstraint('id'),
                    comment='Stores cross-validations.'
                    )
    op.create_table('deposits',
                    sa.Column('id', neuroAPI.database.ext.GUID(), nullable=False, comment='Deposit id'),
                    sa.Column('username', sa.String(length=64), nullable=False, comment='Deposit name'),
                    sa.PrimaryKeyConstraint('id'),
                    comment='Stores deposit data.'
                    )
    op.create_table('metrics',
                    sa.Column('id', neuroAPI.database.ext.GUID(), nullable=False, comment='Metric id'),
                    sa.Column('name', sa.String(length=64), nullable=False, comment='Metric name'),
                    sa.Column('description', sa.Text(), nullable=True, comment='Metric description, e.g. formulae'),
                    sa.PrimaryKeyConstraint('id'),
                    comment='Stores metrics.'
                    )
    op.create_table('deposit_borders',
                    sa.Column('deposit_id', neuroAPI.database.ext.GUID(), nullable=False, comment='Deposit id'),
                    sa.Column('point_type', sa.Enum('max', 'min', name='borderpointtype'), nullable=False,
                              comment='Border point type'),
                    sa.Column('x_value', sa.Numeric(), nullable=False, comment='Point value on x-axis'),
                    sa.Column('y_value', sa.Numeric(), nullable=False, comment='Point value on y-axis'),
                    sa.Column('z_value', sa.Numeric(), nullable=False, comment='Point value on z-axis'),
                    sa.ForeignKeyConstraint(['deposit_id'], ['deposits.id'], ),
                    sa.PrimaryKeyConstraint('deposit_id', 'point_type'),
                    comment='Stores deposit borders data.'
                    )
    op.create_table('deposit_owners',
                    sa.Column('deposit_id', neuroAPI.database.ext.GUID(), nullable=False, comment='Deposit id'),
                    sa.Column('user_id', neuroAPI.database.ext.GUID(), nullable=False, comment='User id'),
                    sa.ForeignKeyConstraint(['deposit_id'], ['deposits.id'], ),
                    sa.ForeignKeyConstraint(['user_id'], ['app_users.id'], ),
                    sa.PrimaryKeyConstraint('deposit_id', 'user_id'),
                    comment='Links users and owned deposits.'
                    )
    op.create_table('files',
                    sa.Column('id', neuroAPI.database.ext.GUID(), nullable=False, comment='File id'),
                    sa.Column('name', sa.String(length=255), nullable=False,
                              comment='original filename with extension, e.g. "text.xlsx"'),
                    sa.Column('data_type', neuroAPI.database.ext.GUID(), nullable=False, comment='MIME content type'),
                    sa.Column('description', sa.Text(), nullable=True, comment='Long description'),
                    sa.Column('date_added', sa.DateTime(), nullable=False, comment='When was created'),
                    sa.Column('content', sa.LargeBinary(), nullable=False, comment='File itself in binary'),
                    sa.ForeignKeyConstraint(['data_type'], ['content_types.id'], ),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('name', 'data_type'),
                    comment='Stores files.'
                    )
    op.create_index('file_index', 'files', ['name', 'data_type'], unique=False)
    op.create_table('neural_models',
                    sa.Column('id', neuroAPI.database.ext.GUID(), nullable=False, comment='Neural model id'),
                    sa.Column('deposit_id', neuroAPI.database.ext.GUID(), nullable=False, comment='Deposit id'),
                    sa.Column('block_size', sa.Numeric(), nullable=False, comment='Neural model block size'),
                    sa.Column('max_epochs', sa.Integer(), nullable=False, comment='Max epoch count'),
                    sa.Column('cross_validation_id', neuroAPI.database.ext.GUID(), nullable=True,
                              comment='Cross-validation grouping entity id'),
                    sa.Column('structure', sa.LargeBinary(), nullable=False, comment='NM structure'),
                    sa.Column('weights', sa.LargeBinary(), nullable=False, comment='NM weights'),
                    sa.ForeignKeyConstraint(['cross_validation_id'], ['cross_validations.id'], ),
                    sa.ForeignKeyConstraint(['deposit_id'], ['deposits.id'], ),
                    sa.PrimaryKeyConstraint('id'),
                    comment='Stores neural models.'
                    )
    op.create_table('rocks',
                    sa.Column('id', neuroAPI.database.ext.GUID(), nullable=False, comment='Rock id'),
                    sa.Column('deposit_id', neuroAPI.database.ext.GUID(), nullable=False, comment='Deposit id'),
                    sa.Column('index', sa.Integer(), autoincrement=True, nullable=False,
                              comment='Rock index in deposit'),
                    sa.Column('name', sa.String(length=64), nullable=False, comment='Rock name'),
                    sa.Column('color', sa.CHAR(length=7), nullable=True, comment='Rock hex color, e.g. "#FFFFFF"'),
                    sa.ForeignKeyConstraint(['deposit_id'], ['deposits.id'], ),
                    sa.PrimaryKeyConstraint('id'),
                    comment='Store rock data.'
                    )
    op.create_table('user_contact_information',
                    sa.Column('user_id', neuroAPI.database.ext.GUID(), nullable=False, comment='User id'),
                    sa.Column('contact_info_type',
                              sa.Enum('firstname', 'lastname', 'email', name='contactinformationtype'), nullable=False,
                              comment='CI type'),
                    sa.Column('contact_info_value', sa.String(length=320), nullable=True, comment='CI value'),
                    sa.ForeignKeyConstraint(['user_id'], ['app_users.id'], ),
                    sa.PrimaryKeyConstraint('user_id', 'contact_info_type'),
                    comment='Stores user contact information.'
                    )
    op.create_table('wells',
                    sa.Column('id', neuroAPI.database.ext.GUID(), nullable=False, comment='Well id'),
                    sa.Column('deposit_id', neuroAPI.database.ext.GUID(), nullable=False, comment='Deposit id'),
                    sa.Column('head_x', sa.Numeric(), nullable=False, comment='Head point value on x-axis'),
                    sa.Column('head_y', sa.Numeric(), nullable=False, comment='Head point value on y-axis'),
                    sa.Column('head_z', sa.Numeric(), nullable=False, comment='Head point value on z-axis'),
                    sa.Column('tail_x', sa.Numeric(), nullable=False, comment='Tail point value on x-axis'),
                    sa.Column('tail_y', sa.Numeric(), nullable=False, comment='Tail point value on y-axis'),
                    sa.Column('tail_z', sa.Numeric(), nullable=False, comment='Tail point value on z-axis'),
                    sa.ForeignKeyConstraint(['deposit_id'], ['deposits.id'], ),
                    sa.PrimaryKeyConstraint('id'),
                    comment='Store wells.'
                    )
    op.create_table('deposit_files',
                    sa.Column('deposit_id', neuroAPI.database.ext.GUID(), nullable=False, comment='Deposit id'),
                    sa.Column('file_id', neuroAPI.database.ext.GUID(), nullable=False, comment='File id'),
                    sa.ForeignKeyConstraint(['deposit_id'], ['deposits.id'], ),
                    sa.ForeignKeyConstraint(['file_id'], ['files.id'], ),
                    sa.PrimaryKeyConstraint('deposit_id', 'file_id'),
                    comment='Lists links to deposit’s files.'
                    )
    op.create_table('known_blocks',
                    sa.Column('id', neuroAPI.database.ext.GUID(), nullable=False, comment='Known block id'),
                    sa.Column('well_id', neuroAPI.database.ext.GUID(), nullable=False, comment='This block well id'),
                    sa.Column('size', sa.Numeric(), nullable=False, comment='Block size'),
                    sa.Column('center_x', sa.Numeric(), nullable=False, comment='Center point value on x-axis'),
                    sa.Column('center_y', sa.Numeric(), nullable=False, comment='Center point value on y-axis'),
                    sa.Column('center_z', sa.Numeric(), nullable=False, comment='Center point value on z-axis'),
                    sa.Column('content', neuroAPI.database.ext.GUID(), nullable=False, comment='Rock on this block'),
                    sa.ForeignKeyConstraint(['content'], ['rocks.id'], ),
                    sa.ForeignKeyConstraint(['well_id'], ['wells.id'], ),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('well_id', 'size', 'center_x', 'center_y', 'center_z'),
                    comment='Stores known blocks.'
                    )
    op.create_table('neural_models_excluded_wells',
                    sa.Column('neural_model_id', neuroAPI.database.ext.GUID(), nullable=False,
                              comment='Neural model id'),
                    sa.Column('well_id', neuroAPI.database.ext.GUID(), nullable=False, comment='Well id'),
                    sa.ForeignKeyConstraint(['neural_model_id'], ['neural_models.id'], ),
                    sa.ForeignKeyConstraint(['well_id'], ['wells.id'], ),
                    sa.PrimaryKeyConstraint('neural_model_id', 'well_id'),
                    comment='Lists excluded wells from training.'
                    )
    op.create_table('neural_models_metrics',
                    sa.Column('neural_model_id', neuroAPI.database.ext.GUID(), nullable=False,
                              comment='Neural model id'),
                    sa.Column('metric_id', neuroAPI.database.ext.GUID(), nullable=False, comment='Metric id'),
                    sa.Column('epoch', sa.Integer(), nullable=False, comment='Current epoch'),
                    sa.Column('value', sa.Numeric(), nullable=False, comment='Metric value'),
                    sa.ForeignKeyConstraint(['metric_id'], ['metrics.id'], ),
                    sa.ForeignKeyConstraint(['neural_model_id'], ['neural_models.id'], ),
                    sa.PrimaryKeyConstraint('neural_model_id', 'metric_id', 'epoch'),
                    comment='Lists metric data.'
                    )
    op.create_table('well_intervals',
                    sa.Column('well_id', neuroAPI.database.ext.GUID(), nullable=False, comment='Well id'),
                    sa.Column('position', sa.Integer(), nullable=False, comment='Interval position from head'),
                    sa.Column('from_x', sa.Numeric(), nullable=False, comment='From point value on x-axis'),
                    sa.Column('from_y', sa.Numeric(), nullable=False, comment='From point value on y-axis'),
                    sa.Column('from_z', sa.Numeric(), nullable=False, comment='From point value on z-axis'),
                    sa.Column('to_x', sa.Numeric(), nullable=False, comment='To point value on x-axis'),
                    sa.Column('to_y', sa.Numeric(), nullable=False, comment='To point value on y-axis'),
                    sa.Column('to_z', sa.Numeric(), nullable=False, comment='To point value on z-axis'),
                    sa.ForeignKeyConstraint(['well_id'], ['wells.id'], ),
                    sa.PrimaryKeyConstraint('well_id', 'position'),
                    comment='Lists well’s intervals.'
                    )
    op.create_table('predicted_blocks',
                    sa.Column('id', neuroAPI.database.ext.GUID(), nullable=False, comment='Predicted block id'),
                    sa.Column('neural_model_id', neuroAPI.database.ext.GUID(), nullable=True,
                              comment='Neural model id'),
                    sa.Column('center_x', sa.Numeric(), nullable=False, comment='Center point value on x-axis'),
                    sa.Column('center_y', sa.Numeric(), nullable=False, comment='Center point value on y-axis'),
                    sa.Column('center_z', sa.Numeric(), nullable=False, comment='Center point value on z-axis'),
                    sa.Column('known_block_id', neuroAPI.database.ext.GUID(), nullable=True,
                              comment='paired Known block'),
                    sa.Column('content', neuroAPI.database.ext.GUID(), nullable=False, comment='Rock on this block'),
                    sa.ForeignKeyConstraint(['content'], ['rocks.id'], ),
                    sa.ForeignKeyConstraint(['known_block_id'], ['known_blocks.id'], ),
                    sa.ForeignKeyConstraint(['neural_model_id'], ['neural_models.id'], ),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('neural_model_id', 'center_x', 'center_y', 'center_z'),
                    comment='Stores predicted blocks.'
                    )
    op.create_index('known_block_index', 'predicted_blocks', ['known_block_id'], unique=False, postgresql_using='hash')
    op.create_table('predicted_blocks_outputs',
                    sa.Column('predicted_block_id', neuroAPI.database.ext.GUID(), nullable=False,
                              comment='Predicted block id'),
                    sa.Column('rock_id', neuroAPI.database.ext.GUID(), nullable=False, comment='Rock id'),
                    sa.Column('value', sa.Numeric(), nullable=False, comment='probability [0, 1]'),
                    sa.ForeignKeyConstraint(['predicted_block_id'], ['predicted_blocks.id'], ),
                    sa.ForeignKeyConstraint(['rock_id'], ['rocks.id'], ),
                    sa.PrimaryKeyConstraint('predicted_block_id', 'rock_id'),
                    comment='Lists predicted block outputs.'
                    )
    # ### end Alembic commands ###

    # ### omelched:INIT content_types

    from sqlalchemy import orm

    from neuroAPI.database.models import ContentType

    bind = op.get_bind()
    session = orm.Session(bind=bind)

    xlsx = ContentType(name='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')
    xls = ContentType(name='application/vnd.ms-excel')
    xlsb = ContentType(name='application/vnd.ms-excel.sheet.binary.macroEnabled.12')
    csv = ContentType(name='text/csv')

    session.add_all([xlsx, xls, xlsb, csv])

    session.commit()

    # ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('predicted_blocks_outputs')
    op.drop_index('known_block_index', table_name='predicted_blocks')
    op.drop_table('predicted_blocks')
    op.drop_table('well_intervals')
    op.drop_table('neural_models_metrics')
    op.drop_table('neural_models_excluded_wells')
    op.drop_table('known_blocks')
    op.drop_table('deposit_files')
    op.drop_table('wells')
    op.drop_table('user_contact_information')
    op.drop_table('rocks')
    op.drop_table('neural_models')
    op.drop_index('file_index', table_name='files')
    op.drop_table('files')
    op.drop_table('deposit_owners')
    op.drop_table('deposit_borders')
    op.drop_table('metrics')
    op.drop_table('deposits')
    op.drop_table('cross_validations')
    op.drop_table('content_types')
    op.drop_table('app_users')
    # ### end Alembic commands ###

    # ### omelched: drop postgresql types

    from sqlalchemy import orm

    bind = op.get_bind()
    if bind.dialect.name == 'postgresql':
        session = orm.Session(bind=bind)
        result = session.execute('''
        SELECT      t.typname as type 
        FROM        pg_type t 
        LEFT JOIN   pg_catalog.pg_namespace n ON n.oid = t.typnamespace 
        WHERE       (t.typrelid = 0 OR (SELECT c.relkind = 'c' FROM pg_catalog.pg_class c WHERE c.oid = t.typrelid)) 
        AND     NOT EXISTS(SELECT 1 FROM pg_catalog.pg_type el WHERE el.oid = t.typelem AND el.typarray = t.oid)
        AND     n.nspname NOT IN ('pg_catalog', 'information_schema');
        ''')
        for row in result:
            op.execute(f'DROP TYPE {row[0]};')
        session.commit()

    # ###
